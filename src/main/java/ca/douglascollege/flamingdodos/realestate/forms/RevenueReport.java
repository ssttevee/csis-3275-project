package ca.douglascollege.flamingdodos.realestate.forms;

import ca.douglascollege.flamingdodos.database.exceptions.DatabaseException;
import ca.douglascollege.flamingdodos.database.interfaces.DatabaseQuery;
import ca.douglascollege.flamingdodos.database.interfaces.IDatabaseCursor;
import ca.douglascollege.flamingdodos.database.sqlite.util.BasePropertyFilter;
import ca.douglascollege.flamingdodos.realestate.data.NewCenturyDatabase;
import ca.douglascollege.flamingdodos.realestate.data.models.AgentModel;
import ca.douglascollege.flamingdodos.realestate.data.models.SaleTransactionModel;
import ca.douglascollege.flamingdodos.realestate.generator.RevenueReportGenerator;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import java.util.Date;

public class RevenueReport extends BaseOutputForm {
    private JPanel contentPane;
    private JButton closeButton;
    private JButton printButton;
    private JComboBox yearComboBox;
    private JComboBox monthComboBox;
    private JTextArea newCenturyRealtyCompanyTextArea;

    public RevenueReport() {
        super("Revenue Report");

        closeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                close();
            }
        });

        monthComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateGenerator();
            }
        });
        yearComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateGenerator();
            }
        });

        setContentPane(contentPane);

        init(newCenturyRealtyCompanyTextArea, null);

        updateGenerator();
    }

    private void updateGenerator() {
        int month = monthComboBox.getSelectedIndex();
        int year = Integer.parseInt((String) yearComboBox.getSelectedItem());

        try {
            Calendar calendar = Calendar.getInstance();
            calendar.set(year, month, 1, 0, 0, 0);
            final Date monthStart = calendar.getTime();
            calendar.set(year, month + 1, 1, 0, 0, 0);
            final Date monthEnd = calendar.getTime();


            int agentCount = 0;
            IDatabaseCursor<AgentModel> agentsCursor = NewCenturyDatabase.getInstance().execute(AgentModel.class, new DatabaseQuery().setFilter(
                    new BasePropertyFilter(AgentModel.COLUMN_HIRE_DATE) {
                        @Override
                        protected boolean evaluate(Object operand) {
                            if (operand instanceof Long) {
                                operand = new Date((Long) operand);
                            } else if (!(operand instanceof Date)) {
                                return false;
                            }

                            return ((Date) operand).before(monthEnd);
                        }
                    }
            ));
            // these should already be before monthEnd
            while (agentsCursor.hasNext()) {
                AgentModel agent = agentsCursor.next();
                agentCount++;
            }

            int transactionCount = 0;
            IDatabaseCursor<SaleTransactionModel> txnCursor = NewCenturyDatabase.getInstance().execute(SaleTransactionModel.class, new DatabaseQuery().setFilter(
                    new BasePropertyFilter(SaleTransactionModel.COLUMN_DATE) {
                        @Override
                        protected boolean evaluate(Object operand) {
                            if (operand instanceof Long) {
                                operand = new Date((Long) operand);
                            } else if (!(operand instanceof Date)) {
                                return false;
                            }

                            return ((Date) operand).after(monthStart) && ((Date) operand).before(monthEnd);
                        }
                    }
            ));
            while (txnCursor.hasNext()) {
                SaleTransactionModel txn = txnCursor.next();
                transactionCount++;
            }

            setGenerator(new RevenueReportGenerator(((String) monthComboBox.getSelectedItem()), year, agentCount, transactionCount));
            pack();
            updateOutput(newCenturyRealtyCompanyTextArea);
        } catch (DatabaseException e) {
            e.printStackTrace();
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        printButton = new JButton();
        printButton.setText("Print");
        panel1.add(printButton);
        closeButton = new JButton();
        closeButton.setText("Close");
        panel1.add(closeButton);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        yearComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("2016");
        yearComboBox.setModel(defaultComboBoxModel1);
        panel2.add(yearComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        monthComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("January");
        defaultComboBoxModel2.addElement("February");
        defaultComboBoxModel2.addElement("March");
        defaultComboBoxModel2.addElement("April");
        monthComboBox.setModel(defaultComboBoxModel2);
        panel2.add(monthComboBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newCenturyRealtyCompanyTextArea = new JTextArea();
        newCenturyRealtyCompanyTextArea.setEditable(false);
        newCenturyRealtyCompanyTextArea.setFont(new Font("Courier New", newCenturyRealtyCompanyTextArea.getFont().getStyle(), newCenturyRealtyCompanyTextArea.getFont().getSize()));
        newCenturyRealtyCompanyTextArea.setText("New Century Realty Company\n\nRevenue Report for {MONTH} {YEAR}\n\n{N_AGENTS} Agents @ $300\t\t\t{AGENT_FEES}\n{N_DEALS} Deals @ $200\t\t\t\t{DEAL_FEES}\n------------------------------------------------------------\nTotal\t\t\t\t\t\t{TOTAL}");
        contentPane.add(newCenturyRealtyCompanyTextArea, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
